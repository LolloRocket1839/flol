// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://vavvdnylwwfigezdikfy.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZhdnZkbnlsd3dmaWdlemRpa2Z5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcwNzc4NjYsImV4cCI6MjA2MjY1Mzg2Nn0.wCAFEe6Af3Ncpjspf2Def43Z3nY0R0S8wVkV4mFfBK0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    detectSessionInUrl: true
  },
  global: {
    fetch: fetch.bind(globalThis),
    headers: {
      'Cache-Control': 'max-age=3600' // Increased cache to 1 hour
    }
  },
  // Add DB level caching to improve performance
  db: {
    schema: 'public'
  },
  realtime: {
    params: {
      eventsPerSecond: 1 // Limit realtime events to reduce overhead
    }
  }
});

// Create a memory cache for articles
const articlesCache = new Map<string, any>();

// Helper to get cached data
export const getCachedData = (key: string) => {
  return articlesCache.get(key);
};

// Helper to set cached data
export const setCachedData = (key: string, data: any, ttl = 5 * 60 * 1000) => {
  articlesCache.set(key, data);
  setTimeout(() => articlesCache.delete(key), ttl); // Auto-expire after TTL
};